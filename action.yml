name: 'PowerShell Module Version Update and Publish'
branding:
  icon: 'upload'  
  color: 'gray-dark'
description: 'Update module version and publish to the PowerShell Gallery'
inputs:
  files:
    description: 'Manifest files to update. If left blank, it will update all .psd1 files in the repo.'
    required: false
  whatif:
    description: 'Run WhatIf instead of actually publishing'
    required: false
  skipautomatictags:
    description: 'Skip automatic tags when publishing to Gallery'
    required: false
  modulepath:
    description: 'The relative path to the PowerShell module'
    required: false
  gallerykey:
    description: 'The PowerShell Gallery (Nuget) key'
    required: false
outputs:
  needed: 
    description: "errors"
    value: ${{ steps.publishtogallery.outputs.errors }}
  modulepath: 
    description: "Success or failure"
    value: ${{ steps.psoutput.outputs.success }}
runs:
  using: "composite"
  steps: 
    - id: intro
      shell: bash
      run: echo Processing files ${{ inputs.files }}.
    - id: updatemodule
      shell: pwsh
      env:
        files: ${{ inputs.files }}
      run: |
        if ($env:files) {
          $files = $env:files
        } else {
          $files = "*.psd1"
        }
        $manifests = Get-ChildItem -Recurse $files
        foreach ($file in $manifests) {
          # Use regex, Update-ModuleManifest destroys formatting
          [version]$Version = [regex]::matches((Get-Content $file), "\s*ModuleVersion\s*=\s*'(\d*.\d*.\d*)'\s*").groups[1].value
          # Add one to the build of the version number
          [version]$newversion = "{0}.{1}.{2}" -f $Version.Major, $Version.Minor, ($Version.Build + 1) 
          # Update the manifest file
          (Get-Content $file) -replace $version, $NewVersion | Out-File $file
        }
    - id: pushtoremote
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add -A
        git commit -m "Update module version"
        git push
    - id: publishtogallery
      shell: pwsh
      env: 
        gallerykey: ${{ inputs.gallerykey }}
        whatif: ${{ inputs.whatif }}
        skipautomatictags: ${{ inputs.skipautomatictags }}
        modulepath: ${{ inputs.modulepath }}
      run: |
        if (-not $env:modulepath) {
          if ($isWindows) {
            $env:modulepath = ".\"
          } else {
            $env:modulepath = "./"
          }
        }

        if ($env:gallerykey) {
          try {
            Publish-Module -Path $env:modulepath -NuGetApiKey $env:gallerykey -SkipAutomaticTags:$($env:skipautomatictags) -Verbose -ErrorAction Stop -WhatIf:$($env:whatif) -Verbose
            Write-Output "::set-output name=success::$($true)"
          } catch {
            Write-Output "::set-output name=success::$($false)"
            Write-Error $_
          }
        }
        if ($error) {
          Write-Output "::set-output name=errors::$($error)"
        }